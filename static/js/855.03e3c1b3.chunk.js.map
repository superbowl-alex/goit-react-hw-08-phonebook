{"version":3,"file":"static/js/855.03e3c1b3.chunk.js","mappings":"gRAQIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,GACI,oBACPG,IAAI,EAAG,4CACPC,IAAI,GAAI,6CACRC,SAAS,oBACZC,MAAON,EAAAA,GACG,oBACPM,MAAM,uBACND,SAAS,qBACZE,SAAUP,EAAAA,GACA,uBACPG,IAAI,EAAG,qDACPE,SAAS,0BA6Ed,EA1EqB,WACnB,IAAMG,GAAWC,EAAAA,EAAAA,MAaXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbV,KAAM,GACNI,MAAO,GACPC,SAAU,IAEZM,iBAAkBd,EAClBe,SAlBmB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BR,GACES,EAAAA,EAAAA,IAAS,CACPf,KAAMa,EAAOb,KAAKgB,OAClBZ,MAAOS,EAAOT,MAAMY,OACpBX,SAAUQ,EAAOR,SAASW,UAG9BF,GACD,IAYD,OACE,UAACG,EAAA,EAAD,CACEC,UAAU,OACVN,SAAUJ,EAAOW,aACjBC,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,MAAO,IACP,kBAAmB,CAAEC,EAAG,MAR5B,WAWE,SAACC,EAAA,EAAD,CACEC,GAAG,OACH3B,KAAK,OACL4B,MAAM,OACNC,aAAa,MACbC,MAAOtB,EAAOK,OAAOb,KACrB+B,SAAUvB,EAAOwB,aACjBC,MAAOzB,EAAO0B,QAAQlC,MAAQmC,QAAQ3B,EAAO4B,OAAOpC,MACpDqC,WAAY7B,EAAO0B,QAAQlC,MAAQQ,EAAO4B,OAAOpC,QAEnD,SAAC0B,EAAA,EAAD,CACEC,GAAG,QACH3B,KAAK,QACL4B,MAAM,QACNC,aAAa,MACbC,MAAOtB,EAAOK,OAAOT,MACrB2B,SAAUvB,EAAOwB,aACjBC,MAAOzB,EAAO0B,QAAQ9B,OAAS+B,QAAQ3B,EAAO4B,OAAOhC,OACrDiC,WAAY7B,EAAO0B,QAAQ9B,OAASI,EAAO4B,OAAOhC,SAEpD,SAACsB,EAAA,EAAD,CACEC,GAAG,WACH3B,KAAK,WACL4B,MAAM,WACNU,KAAK,WACLT,aAAa,MACbC,MAAOtB,EAAOK,OAAOR,SACrB0B,SAAUvB,EAAOwB,aACjBC,MAAOzB,EAAO0B,QAAQ7B,UAAY8B,QAAQ3B,EAAO4B,OAAO/B,UACxDgC,WAAY7B,EAAO0B,QAAQ7B,UAAYG,EAAO4B,OAAO/B,YAEvD,SAACkC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYH,KAAK,SAAjD,sBAKL,ECjFD,EAXiB,WACf,OACE,UAACrB,EAAA,EAAD,CAAKG,GAAI,CAAEI,MAAO,QAAlB,WACE,SAACkB,EAAA,EAAD,WACE,+CAEF,SAAC,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.js","pages/Register/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { register } from 'redux/auth/operations';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string('Enter your email')\n    .min(3, 'Name must be at least 3 characters long!')\n    .max(32, 'Name must be less than 32 characters long')\n    .required('Name is required'),\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(7, 'Password should be of minimum 7 characters length')\n    .required('Password is required'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      register({\n        name: values.name.trim(),\n        email: values.email.trim(),\n        password: values.password.trim(),\n      })\n    );\n    resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: 400,\n        '& > :not(style)': { m: 1.5 },\n      }}\n    >\n      <TextField\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        autoComplete=\"off\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        id=\"email\"\n        name=\"email\"\n        label=\"Email\"\n        autoComplete=\"off\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        id=\"password\"\n        name=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        autoComplete=\"off\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n        Log in\n      </Button>\n    </Box>\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet } from 'react-helmet';\nimport Box from '@mui/material/Box';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </Box>\n  );\n};\n\nexport default Register;\n"],"names":["schema","yup","shape","name","min","max","required","email","password","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","register","trim","Box","component","handleSubmit","sx","display","flexDirection","alignItems","width","m","TextField","id","label","autoComplete","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","Button","color","variant","Helmet"],"sourceRoot":""}