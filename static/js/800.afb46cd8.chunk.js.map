{"version":3,"file":"static/js/800.afb46cd8.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.js","components/Notification/Notification.js","redux/contacts/selectors.js","components/Loader/Loader.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","pages/Contacts/Contacts.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n// import { ButtonClose } from './ContactItem.styled';\nimport { FaWindowClose } from 'react-icons/fa';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      {name}: {number}\n      <button type=\"button\" onClick={handleDelete}>\n        <FaWindowClose size={32} />\n      </button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\n// import { Alert } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Typography variant=\"h3\">{message} </Typography>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.value.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name?.toLowerCase()?.includes(normalizedFilter)\n    );\n  }\n);\n\nexport const selectPendingStatus = createSelector(\n  [selectIsLoading, selectError],\n  (isLoading, error) => {\n    return isLoading && !error;\n  }\n);\n","import React from 'react';\nimport PropagateLoader from 'react-spinners/PropagateLoader';\n// import { WrapSpinner } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <div>\n      <PropagateLoader\n        color={'rgb(205, 92, 92)'}\n        size={15}\n        speedMultiplier={0.4}\n        aria-label=\"Loading Spinner\"\n        data-testid=\"loader\"\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ContactItem from '../ContactItem';\nimport Notification from '../Notification';\nimport { useSelector } from 'react-redux';\nimport {\n  selectVisibleContacts,\n  selectPendingStatus,\n} from 'redux/contacts/selectors';\n// import { List, WrapList, ListTitle, Item } from './ContactList.styled';\nimport Loader from 'components/Loader';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const pending = useSelector(selectPendingStatus);\n\n  return (\n    <Box>\n      <Typography variant=\"h3\">Contacts</Typography>\n      {pending ? (\n        <Loader />\n      ) : contacts.length > 0 ? (\n        <ul>\n          {contacts.map(({ id, name, number }) => (\n            <li key={id}>\n              <ContactItem id={id} name={name} number={number} />\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <Notification message=\"There is no contact in Phonebook\" />\n      )}\n    </Box>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport * as yup from 'yup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n// import {\n//   FormAddContacts,\n//   Label,\n//   Input,\n//   Thumb,\n//   ErrorElement,\n//   ButtonForm,\n// } from './ContactForm.styled';\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  width: '500px',\n  position: 'center-top',\n  closeButton: true,\n  fontFamily: 'Comic Sans MS',\n  fontSize: '24px',\n  warning: {\n    background: 'rgb(255, 240, 245)',\n    textColor: 'rgb(40, 70, 219)',\n    notiflixIconColor: 'rgb(205, 92, 92)',\n  },\n});\n\nlet schema = yup.object().shape({\n  name: yup\n    .string('Enter contact name')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces without spaces at the beginning and end of the name'\n    )\n    .required('Name is required'),\n  number: yup\n    .string('Enter phone number')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const findContactByName = (array, newName) => {\n      return array.find(({ name }) => name.toLowerCase() === newName);\n    };\n\n    const { name } = values;\n    const normalizedName = name.toLowerCase().trim();\n\n    if (findContactByName(contacts, normalizedName)) {\n      Notiflix.Notify.warning(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: 400,\n        '& > :not(style)': { m: 1.5 },\n      }}\n    >\n      <TextField\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        type=\"text\"\n        autoComplete=\"off\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        id=\"number\"\n        name=\"number\"\n        label=\"Number\"\n        type=\"tel\"\n        autoComplete=\"off\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n      />\n      <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n// import { Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleFilterChange = e => {\n    e.preventDefault();\n    const currentFilter = e.currentTarget.value;\n    dispatch(changeFilter(currentFilter));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter.value}\n        onChange={handleFilterChange}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n","import { Helmet } from 'react-helmet';\nimport Typography from '@mui/material/Typography';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactList from 'components/ContactList';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <Typography variant=\"h3\">Phonebook</Typography>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["id","name","number","dispatch","useDispatch","type","onClick","deleteContact","size","message","Typography","variant","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","normalizedFilter","value","toLowerCase","includes","selectPendingStatus","isLoading","error","color","speedMultiplier","useSelector","pending","Box","length","map","Notiflix","width","position","closeButton","fontFamily","fontSize","warning","background","textColor","notiflixIconColor","schema","yup","shape","matches","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","newName","resetForm","normalizedName","trim","find","addContact","component","handleSubmit","sx","display","flexDirection","alignItems","m","TextField","label","autoComplete","onChange","handleChange","touched","Boolean","errors","helperText","Button","e","preventDefault","currentFilter","currentTarget","changeFilter","useEffect","fetchContacts","Helmet"],"sourceRoot":""}