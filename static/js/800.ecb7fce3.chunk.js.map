{"version":3,"file":"static/js/800.ecb7fce3.chunk.js","mappings":"yRAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAItBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAEnBC,EAAe,SAAAL,GAAK,OAAIA,EAAMM,MAAV,EAIpBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACH,EAAcN,IACf,SAACO,EAAQL,GACP,IAAMQ,EAAmBH,EAAOI,MAAMC,cACtC,OAAOV,EAASK,QAAO,kBAAGM,EAAH,EAAGA,KAAH,cACrBA,QADqB,IACrBA,GADqB,UACrBA,EAAMD,qBADe,aACrB,EAAqBE,SAASJ,EADT,GAGxB,IAGUK,GAAsBN,EAAAA,EAAAA,IACjC,CAnB6B,SAAAR,GAAK,OAAIA,EAAMC,SAASc,SAAnB,EAmBhBZ,IAClB,SAACY,EAAWX,GACV,OAAOW,IAAcX,CACtB,IAGUY,GAA8BR,EAAAA,EAAAA,IACzC,CApB8B,SAAAR,GAAK,OAAIA,EAAMC,SAASgB,UAAnB,EAoBhBd,IACnB,SAACc,EAAYb,GACX,OAAOa,IAAeb,CACvB,I,SCqBH,EA1CoB,SAAC,GAA0B,IAAxBc,EAAuB,EAAvBA,GAAIN,EAAmB,EAAnBA,KAAMO,EAAa,EAAbA,OACzBC,GAAWC,EAAAA,EAAAA,MACjB,GAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAKMC,GAAkBC,EAAAA,EAAAA,IAAYV,GAC9BW,EAAwBJ,GAAYE,EAE1C,OACE,UAACG,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBC,MAAO,KALX,WAQE,UAACC,EAAA,EAAD,WACGtB,EADH,KACWO,MAEX,SAACgB,EAAA,EAAD,CACEC,KAAK,QACLC,QArBe,WACnBb,EAAYN,GACZE,GAASkB,EAAAA,EAAAA,IAAcpB,GACxB,EAmBKqB,SAAS,SAACC,EAAA,EAAD,IACTC,QAASd,EACTe,gBAAgB,MAChBC,QAAQ,YANV,sBAYL,EClCD,EARqB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,UAACV,EAAA,EAAD,CAAYS,QAAQ,KAApB,UAA0BC,EAA1B,MACR,E,mBCYD,EAde,WACb,OACE,0BACE,SAAC,IAAD,CACEC,MAAO,mBACPT,KAAM,GACNU,gBAAiB,GACjB,aAAW,kBACX,cAAY,YAInB,ECqBD,EAxBoB,WAClB,IAAM7C,GAAWyB,EAAAA,EAAAA,IAAYnB,GACvBwC,GAAUrB,EAAAA,EAAAA,IAAYZ,GAE5B,OACE,UAACc,EAAA,EAAD,YACE,SAACM,EAAA,EAAD,CAAYS,QAAQ,KAApB,sBACCI,GACC,SAAC,EAAD,IACE9C,EAAS+C,OAAS,GACpB,wBACG/C,EAASgD,KAAI,gBAAG/B,EAAH,EAAGA,GAAIN,EAAP,EAAOA,KAAMO,EAAb,EAAaA,OAAb,OACZ,yBACE,SAAC,EAAD,CAAaD,GAAIA,EAAIN,KAAMA,EAAMO,OAAQA,KADlCD,EADG,OAOhB,SAAC,EAAD,CAAc0B,QAAQ,uCAI7B,E,2DChBDM,IAAAA,OAAAA,KAAqB,CACnBjB,MAAO,QACPkB,SAAU,aACVC,aAAa,EACbC,WAAY,gBACZC,SAAU,OACVC,QAAS,CACPC,WAAY,qBACZC,UAAW,mBACXC,kBAAmB,sBAIvB,IAAIC,EAASC,EAAAA,KAAaC,MAAM,CAC9BjD,KAAMgD,EAAAA,GACI,sBACPE,QACC,yHACA,kHAEDC,SAAS,oBACZ5C,OAAQyC,EAAAA,GACE,sBACPE,QACC,6EACA,gGAEDC,SAAS,8BAwEd,EArEoB,WAClB,IAAM3C,GAAWC,EAAAA,EAAAA,MACXpB,GAAWyB,EAAAA,EAAAA,IAAY3B,GAiBvBiE,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbtD,KAAM,GACNO,OAAQ,IAEVgD,iBAAkBR,EAClBS,SArBmB,SAACC,EAAD,GAA4B,IACbC,EADJC,EAAgB,EAAhBA,UAKtB3D,EAASyD,EAATzD,KACF4D,EAAiB5D,EAAKD,cAAc8D,QALRH,EAOFE,EAAVvE,EANPyE,MAAK,qBAAG9D,KAAgBD,gBAAkB2D,CAArC,KAOlBpB,IAAAA,OAAAA,QAAA,UAA2BtC,EAA3B,6BAGFQ,GAASuD,EAAAA,EAAAA,IAAWN,IACpBE,IACD,IAUD,OACE,UAAC3C,EAAA,EAAD,CACEgD,UAAU,OACVR,SAAUJ,EAAOa,aACjBhD,GAAI,CACFC,QAAS,OACTgD,cAAe,SACf/C,WAAY,SACZE,MAAO,IACP,kBAAmB,CAAE8C,EAAG,MAR5B,WAWE,SAACC,EAAA,EAAD,CACE9D,GAAG,OACHN,KAAK,OACLqE,MAAM,OACNC,KAAK,OACLC,aAAa,MACbzE,MAAOsD,EAAOK,OAAOzD,KACrBwE,SAAUpB,EAAOqB,aACjBjF,MAAO4D,EAAOsB,QAAQ1E,MAAQ2E,QAAQvB,EAAOwB,OAAO5E,MACpD6E,WAAYzB,EAAOsB,QAAQ1E,MAAQoD,EAAOwB,OAAO5E,QAEnD,SAACoE,EAAA,EAAD,CACE9D,GAAG,SACHN,KAAK,SACLqE,MAAM,SACNC,KAAK,MACLC,aAAa,MACbzE,MAAOsD,EAAOK,OAAOlD,OACrBiE,SAAUpB,EAAOqB,aACjBjF,MAAO4D,EAAOsB,QAAQnE,QAAUoE,QAAQvB,EAAOwB,OAAOrE,QACtDsE,WAAYzB,EAAOsB,QAAQnE,QAAU6C,EAAOwB,OAAOrE,UAErD,SAACuE,EAAA,EAAD,CAAQ7C,MAAM,UAAUF,QAAQ,YAAYuC,KAAK,SAAjD,2BAKL,E,UCxFD,EArBe,WACb,IAAM9D,GAAWC,EAAAA,EAAAA,MACXf,GAASoB,EAAAA,EAAAA,IAAYrB,GAO3B,OACE,SAAC2E,EAAA,EAAD,CACEC,MAAM,iBACNC,KAAK,OACLC,aAAa,MACbvE,KAAK,SACLF,MAAOJ,EAAOI,MACd0E,SAbuB,SAAAO,GACzBA,EAAEC,iBACF,IAAMC,EAAgBF,EAAEG,cAAcpF,MACtCU,GAAS2E,EAAAA,EAAAA,GAAaF,GACvB,GAYF,ECGD,EApBiB,WACf,IAAMzE,GAAWC,EAAAA,EAAAA,MAMjB,OAJA2E,EAAAA,EAAAA,YAAU,WACR5E,GAAS6E,EAAAA,EAAAA,MACV,GAAE,CAAC7E,KAGF,6BACE,SAAC8E,EAAA,EAAD,WACE,2CAEF,SAAChE,EAAA,EAAD,CAAYS,QAAQ,KAApB,wBACA,SAAC,EAAD,KACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactItem/ContactItem.js","components/Notification/Notification.js","components/Loader/Loader.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsDeleting = state => state.contacts.isDeleting;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.value.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name?.toLowerCase()?.includes(normalizedFilter)\n    );\n  }\n);\n\nexport const selectPendingStatus = createSelector(\n  [selectIsLoading, selectError],\n  (isLoading, error) => {\n    return isLoading && !error;\n  }\n);\n\nexport const selectPendingDeletingStatus = createSelector(\n  [selectIsDeleting, selectError],\n  (isDeleting, error) => {\n    return isDeleting && !error;\n  }\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport { deleteContact } from 'redux/contacts/operations';\n// import { ButtonClose } from './ContactItem.styled';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { useSelector } from 'react-redux';\nimport { selectPendingDeletingStatus } from 'redux/contacts/selectors';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const [deleteId, setDeleteId] = useState(null);\n  const handleDelete = () => {\n    setDeleteId(id);\n    dispatch(deleteContact(id));\n  };\n  const pendingDeleting = useSelector(selectPendingDeletingStatus);\n  const shouldSpinnerDeleting = deleteId && pendingDeleting;\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        width: 300,\n      }}\n    >\n      <Typography>\n        {name}: {number}\n      </Typography>\n      <LoadingButton\n        size=\"small\"\n        onClick={handleDelete}\n        endIcon={<HighlightOffIcon />}\n        loading={shouldSpinnerDeleting}\n        loadingPosition=\"end\"\n        variant=\"contained\"\n      >\n        Delete\n      </LoadingButton>\n    </Box>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\n// import { Alert } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Typography variant=\"h3\">{message} </Typography>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropagateLoader from 'react-spinners/PropagateLoader';\n// import { WrapSpinner } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <div>\n      <PropagateLoader\n        color={'rgb(205, 92, 92)'}\n        size={15}\n        speedMultiplier={0.4}\n        aria-label=\"Loading Spinner\"\n        data-testid=\"loader\"\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ContactItem from '../ContactItem';\nimport Notification from '../Notification';\nimport { useSelector } from 'react-redux';\nimport {\n  selectVisibleContacts,\n  selectPendingStatus,\n} from 'redux/contacts/selectors';\n// import { List, WrapList, ListTitle, Item } from './ContactList.styled';\nimport Loader from 'components/Loader';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const pending = useSelector(selectPendingStatus);\n\n  return (\n    <Box>\n      <Typography variant=\"h3\">Contacts</Typography>\n      {pending ? (\n        <Loader />\n      ) : contacts.length > 0 ? (\n        <ul>\n          {contacts.map(({ id, name, number }) => (\n            <li key={id}>\n              <ContactItem id={id} name={name} number={number} />\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <Notification message=\"There is no contact in Phonebook\" />\n      )}\n    </Box>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport * as yup from 'yup';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n// import {\n//   FormAddContacts,\n//   Label,\n//   Input,\n//   Thumb,\n//   ErrorElement,\n//   ButtonForm,\n// } from './ContactForm.styled';\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  width: '500px',\n  position: 'center-top',\n  closeButton: true,\n  fontFamily: 'Comic Sans MS',\n  fontSize: '24px',\n  warning: {\n    background: 'rgb(255, 240, 245)',\n    textColor: 'rgb(40, 70, 219)',\n    notiflixIconColor: 'rgb(205, 92, 92)',\n  },\n});\n\nlet schema = yup.object().shape({\n  name: yup\n    .string('Enter contact name')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces without spaces at the beginning and end of the name'\n    )\n    .required('Name is required'),\n  number: yup\n    .string('Enter phone number')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const findContactByName = (array, newName) => {\n      return array.find(({ name }) => name.toLowerCase() === newName);\n    };\n\n    const { name } = values;\n    const normalizedName = name.toLowerCase().trim();\n\n    if (findContactByName(contacts, normalizedName)) {\n      Notiflix.Notify.warning(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: 400,\n        '& > :not(style)': { m: 1.5 },\n      }}\n    >\n      <TextField\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        type=\"text\"\n        autoComplete=\"off\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        id=\"number\"\n        name=\"number\"\n        label=\"Number\"\n        type=\"tel\"\n        autoComplete=\"off\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n      />\n      <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n// import { Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleFilterChange = e => {\n    e.preventDefault();\n    const currentFilter = e.currentTarget.value;\n    dispatch(changeFilter(currentFilter));\n  };\n\n  return (\n    <TextField\n      label=\"Filter by name\"\n      type=\"text\"\n      autoComplete=\"off\"\n      name=\"filter\"\n      value={filter.value}\n      onChange={handleFilterChange}\n    />\n  );\n};\n\nexport default Filter;\n","import { Helmet } from 'react-helmet';\nimport Typography from '@mui/material/Typography';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactList from 'components/ContactList';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <Typography variant=\"h3\">Phonebook</Typography>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","normalizedFilter","value","toLowerCase","name","includes","selectPendingStatus","isLoading","selectPendingDeletingStatus","isDeleting","id","number","dispatch","useDispatch","useState","deleteId","setDeleteId","pendingDeleting","useSelector","shouldSpinnerDeleting","Box","sx","display","alignItems","justifyContent","width","Typography","LoadingButton","size","onClick","deleteContact","endIcon","HighlightOff","loading","loadingPosition","variant","message","color","speedMultiplier","pending","length","map","Notiflix","position","closeButton","fontFamily","fontSize","warning","background","textColor","notiflixIconColor","schema","yup","shape","matches","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","newName","resetForm","normalizedName","trim","find","addContact","component","handleSubmit","flexDirection","m","TextField","label","type","autoComplete","onChange","handleChange","touched","Boolean","errors","helperText","Button","e","preventDefault","currentFilter","currentTarget","changeFilter","useEffect","fetchContacts","Helmet"],"sourceRoot":""}