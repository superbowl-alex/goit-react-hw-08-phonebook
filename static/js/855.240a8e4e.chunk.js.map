{"version":3,"file":"static/js/855.240a8e4e.chunk.js","mappings":"kPAKIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,4CACPC,IAAI,GAAI,6CACRC,SAAS,0BACZC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,0BACpDE,SAAUP,EAAAA,KAEPG,IAAI,EAAG,gDACPC,IAAI,GAAI,kDACRC,SAAS,4BAGRG,EAAY,SAAC,GAAc,IAAZN,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNO,OAAQ,SAAAC,GACN,OAAO,yBAAMA,GACd,GAGN,EAkDD,EAhDqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAajB,OACE,SAAC,KAAD,CACEC,cAAe,CAAEX,KAAM,GAAII,MAAO,GAAIC,SAAU,IAChDO,iBAAkBf,EAClBgB,SAfiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BN,GACEO,EAAAA,EAAAA,IAAS,CACPhB,KAAMc,EAAOd,KAAKiB,OAClBb,MAAOU,EAAOV,MAAMa,OACpBZ,SAAUS,EAAOT,SAASY,UAG9BF,GACD,EAGC,UAKE,UAAC,KAAD,YACE,qCAEE,4BACE,SAAC,KAAD,CAAOG,KAAK,OAAOlB,KAAK,OAAOmB,aAAa,SAC5C,SAACb,EAAD,CAAWN,KAAK,gBAGpB,sCAEE,4BACE,SAAC,KAAD,CAAOkB,KAAK,QAAQlB,KAAK,QAAQmB,aAAa,SAC9C,SAACb,EAAD,CAAWN,KAAK,iBAGpB,yCAEE,4BACE,SAAC,KAAD,CAAOkB,KAAK,WAAWlB,KAAK,WAAWmB,aAAa,SACpD,SAACb,EAAD,CAAWN,KAAK,oBAGpB,mBAAQkB,KAAK,SAAb,0BAIP,EC9DD,EAXiB,WACf,OACE,4BACE,SAACE,EAAA,EAAD,WACE,+CAEF,SAAC,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.js","pages/Register/Register.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport { register } from 'redux/auth/operations';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Name must be at least 3 characters long!')\n    .max(32, 'Name must be less than 32 characters long')\n    .required('This field is required'),\n  email: yup.string().email('Invalid email').required('This field is required'),\n  password: yup\n    .string()\n    .min(7, 'Password must be at least 7 characters long!')\n    .max(16, 'Password must be less than 16 characters long!')\n    .required('This field is required'),\n});\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => {\n        return <div>{message}</div>;\n      }}\n    />\n  );\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      register({\n        name: values.name.trim(),\n        email: values.email.trim(),\n        password: values.password.trim(),\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label>\n          Name\n          <div>\n            <Field type=\"text\" name=\"name\" autoComplete=\"off\" />\n            <FormError name=\"name\" />\n          </div>\n        </label>\n        <label>\n          Email\n          <div>\n            <Field type=\"email\" name=\"email\" autoComplete=\"off\" />\n            <FormError name=\"email\" />\n          </div>\n        </label>\n        <label>\n          Password\n          <div>\n            <Field type=\"password\" name=\"password\" autoComplete=\"off\" />\n            <FormError name=\"password\" />\n          </div>\n        </label>\n        <button type=\"submit\">Register</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet } from 'react-helmet';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default Register;\n"],"names":["schema","yup","shape","name","min","max","required","email","password","FormError","render","message","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","register","trim","type","autoComplete","Helmet"],"sourceRoot":""}