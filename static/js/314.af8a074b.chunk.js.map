{"version":3,"file":"static/js/314.af8a074b.chunk.js","mappings":"kUAUIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,GACG,oBACPE,MAAM,uBACNC,SAAS,qBACZC,SAAUJ,EAAAA,GACA,uBACPK,IAAI,EAAG,qDACPF,SAAS,0BA2Gd,EAxGkB,WAChB,IAAMG,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,UAAjB,SACKJ,GACtBK,EAAAA,EAAAA,IAAM,CACJT,MAAOO,EAAOP,MAAMU,OACpBR,SAAUK,EAAOL,SAASQ,UAJX,qBACXC,MADW,uBAQjBH,IACAI,EAAAA,GAAAA,QAAA,+BAA8CC,EAAAA,GAT7B,0BAYnBD,EAAAA,GAAAA,MAAA,mEAEEC,EAAAA,GAdiB,4CAAH,wDAkBZC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbhB,MAAO,GACPE,SAAU,IAEZe,iBAAkBpB,EAClBqB,SAAUZ,IAGZ,OACE,UAACa,EAAA,EAAD,CACEC,UAAU,OACVF,SAAUJ,EAAOR,aACjBe,GAAI,CACFC,MAAO,IACPC,gBAAiB,eACjBC,GAAI,OACJC,aAAc,EACdC,EAAG,EACHC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZ,kBAAmB,CAAEC,EAAG,MAb5B,WAgBE,SAACC,EAAA,EAAD,CACEC,GAAG,QACHC,MAAM,SACNC,KAAK,QACLC,MAAM,QACNC,aAAa,MACbC,MAAOxB,EAAOP,OAAOP,MACrBuC,SAAUzB,EAAO0B,aACjB7B,MAAOG,EAAO2B,QAAQzC,OAAS0C,QAAQ5B,EAAO6B,OAAO3C,OACrD4C,WAAY9B,EAAO2B,QAAQzC,OAASc,EAAO6B,OAAO3C,MAClDqB,GAAI,CACFC,MAAO,IACPK,UAAW,EACXF,aAAc,EACdF,gBAAiB,oBAGrB,SAACS,EAAA,EAAD,CACEC,GAAG,WACHC,MAAM,SACNC,KAAK,WACLC,MAAM,WACNS,KAAK,WACLR,aAAa,MACbC,MAAOxB,EAAOP,OAAOL,SACrBqC,SAAUzB,EAAO0B,aACjB7B,MAAOG,EAAO2B,QAAQvC,UAAYwC,QAAQ5B,EAAO6B,OAAOzC,UACxD0C,WAAY9B,EAAO2B,QAAQvC,UAAYY,EAAO6B,OAAOzC,SACrDmB,GAAI,CACFC,MAAO,IACPK,UAAW,EACXF,aAAc,EACdF,gBAAiB,oBAGrB,SAACuB,EAAA,EAAD,CACEZ,MAAM,UACNa,QAAQ,YACRF,KAAK,SACLxB,GAAI,CACF2B,QAAS,gBACTC,SAAU,GACVC,WAAY,IACZC,WAAY,2BACZ,UAAW,CACTC,WAAY,eACZlB,MAAO,OACPmB,UAAW,eAZjB,sBAoBL,EC5GD,EAXc,WACZ,OACE,UAAClC,EAAA,EAAD,CAAKE,GAAI,CAAEC,MAAO,QAAlB,WACE,SAACgC,EAAA,EAAD,WACE,wCAEF,SAAC,EAAD,MAGL,C,uDCbM,IAAMzC,EAAe,CAC1B0C,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,E","sources":["components/LoginForm/LoginForm.js","pages/Login.js","utils/toastOptions.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { logIn } from 'redux/auth/operations';\nimport { toastOptions } from 'utils/toastOptions';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\n\nlet schema = yup.object().shape({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(7, 'Password should be of minimum 7 characters length')\n    .required('Password is required'),\n});\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const { error } = await dispatch(\n      logIn({\n        email: values.email.trim(),\n        password: values.password.trim(),\n      })\n    );\n    if (!error) {\n      resetForm();\n      toast.success(`You have successfully Log In`, toastOptions);\n      return;\n    }\n    toast.error(\n      `An error has occurred, please check the information you entered.`,\n      toastOptions\n    );\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: schema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        width: 500,\n        backgroundColor: 'primary.main',\n        mx: 'auto',\n        borderRadius: 2,\n        p: 2,\n        boxShadow: 5,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        '& > :not(style)': { m: 1.5 },\n      }}\n    >\n      <TextField\n        id=\"email\"\n        color=\"accent\"\n        name=\"email\"\n        label=\"Email\"\n        autoComplete=\"off\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n        sx={{\n          width: 400,\n          boxShadow: 2,\n          borderRadius: 1,\n          backgroundColor: 'primary.light',\n        }}\n      />\n      <TextField\n        id=\"password\"\n        color=\"accent\"\n        name=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        autoComplete=\"off\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n        sx={{\n          width: 400,\n          boxShadow: 2,\n          borderRadius: 1,\n          backgroundColor: 'primary.light',\n        }}\n      />\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        type=\"submit\"\n        sx={{\n          bgcolor: 'primary.light',\n          fontSize: 18,\n          fontWeight: 500,\n          transition: 'transform 250ms ease-out',\n          '&:hover': {\n            background: 'primary.dark',\n            color: '#fff',\n            transform: 'scale(1.1)',\n          },\n        }}\n      >\n        Log in\n      </Button>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import { Helmet } from 'react-helmet';\nimport Box from '@mui/material/Box';\nimport LoginForm from '../components/LoginForm';\n\nconst Login = () => {\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </Box>\n  );\n};\n\nexport default Login;\n","export const toastOptions = {\n  position: 'top-right',\n  autoClose: 1000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n};\n"],"names":["schema","yup","shape","email","required","password","min","dispatch","useDispatch","handleSubmit","values","resetForm","logIn","trim","error","toast","toastOptions","formik","useFormik","initialValues","validationSchema","onSubmit","Box","component","sx","width","backgroundColor","mx","borderRadius","p","boxShadow","display","flexDirection","alignItems","m","TextField","id","color","name","label","autoComplete","value","onChange","handleChange","touched","Boolean","errors","helperText","type","Button","variant","bgcolor","fontSize","fontWeight","transition","background","transform","Helmet","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined"],"sourceRoot":""}